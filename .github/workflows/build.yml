name: pi-topOS Experimental Bullseye Build

on:
  push:
    branches:
      - "**"
  workflow_dispatch:
  schedule:
    # Run daily at midnight
    - cron:  '0 0 * * *'

env:
  IMAGE_NAME: "2021-10-30-raspios-bullseye-armhf"

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: GitHub Environment Variables Action
        uses: FranzDiebold/github-env-vars-action@v1.2.1

      - name: Checkout code
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y qemu-user-static unzip

      - name: Cache unzipped Raspberry Pi OS
        id: cache-rpi-os
        uses: actions/cache@v2
        with:
          path: "./${{ env.IMAGE_NAME }}.img"
          key: ${{ env.IMAGE_NAME }}

      - name: Download and extract Raspberry Pi OS
        if: steps.cache-rpi-os.outputs.cache-hit != 'true'
        run: |
          build_type_dir="raspios_$(echo ${{ matrix.build_type_name }} | python3 -c "import sys; print('_'.join(reversed(sys.stdin.read().strip().split('-'))))")"
          url="https://downloads.raspberrypi.org/raspios_armhf/images/raspios_armhf-2021-11-08/${{ env.IMAGE_NAME }}.zip"

          wget $url
          unzip ${{ env.IMAGE_NAME }}.zip
          rm ${{ env.IMAGE_NAME }}.zip

      - name: Mount
        run: |
          lo_device="$(sudo losetup -f)"

          sudo partx --add --verbose "./${{ env.IMAGE_NAME }}.img"

          # Add 1GB to image
          sudo dd if=/dev/zero bs=1M count=1024 >> "./${{ env.IMAGE_NAME }}.img"

          set -x

          # sudo resize2fs "${lo_device}p2"

          sudo mkdir -p /loopfs
          sudo mount -o loop "${lo_device}p2" /loopfs
          sudo resize2fs /loopfs

          sudo mkdir -p /mnt/raspi-os
          sudo mount UUID=$(sudo blkid -l -o export -t LABEL='rootfs' | grep '^UUID' | cut -d'=' -f2) /mnt/raspi-os
          sudo mount UUID=$(sudo blkid -l -o export -t LABEL='boot'   | grep '^UUID' | cut -d'=' -f2) /mnt/raspi-os/boot

      - name: Prepare
        run: |
          sudo cp /usr/bin/qemu-arm-static /mnt/raspi-os/usr/bin/qemu-arm-static

          sudo mv /mnt/raspi-os/etc/ld.so.preload /mnt/raspi-os/etc/ld.so.preload.bak

          wget https://github.com/multiarch/qemu-user-static/releases/download/v5.2.0-11/x86_64_qemu-arm-static.tar.gz
          tar xvf x86_64_qemu-arm-static.tar.gz
          rm x86_64_qemu-arm-static.tar.gz

          sudo cp qemu-arm-static /mnt/raspi-os/usr/bin/

          sudo mkdir -p /mnt/raspi-os/tmp/chilipie-kiosk-build
          sudo cp -r . /mnt/raspi-os/tmp/chilipie-kiosk-build

      # - name: Build
      #   run: sudo chroot /mnt/raspi-os/ qemu-arm-static /mnt/raspi-os/tmp/chilipie-kiosk-build/setup.sh

      # - name: Clean up
      #   run: |
      #     sudo rm -rf /mnt/raspi-os/tmp/chilipie-kiosk-build

      #     sudo umount /mnt/raspi-os/boot
      #     sudo umount /mnt/raspi-os/

      #     # unmount
      #     # zip
      #     # upload
