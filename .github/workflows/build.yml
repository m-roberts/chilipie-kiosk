name: pi-topOS Experimental Bullseye Build

on:
  push:
    branches:
      - "**"
    paths:
      - "playbooks/**"
      - "inventory"
      - "ansible.cfg"
      - ".github/workflows/bullseye-experimental.yml"
  workflow_dispatch:
  schedule:
    # Run daily at midnight
    - cron:  '0 0 * * *'

env:
  DISTRO_NAME: "bullseye"
  REPO_NAME: "experimental"
  RASPIOS_BUILD_DATE: "2021-10-30"
  RASPIOS_RELEASE_DATE: "2021-11-08"

jobs:
  build:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        include:
          # armhf-lite
          # armhf
          - build_type_name: "armhf"

    steps:
      - name: GitHub Environment Variables Action
        uses: FranzDiebold/github-env-vars-action@v1.2.1

      - name: Checkout code
        uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0

      - name: Get RPi OS image name
        run: |
          echo "IMAGE_NAME=${{ env.RASPIOS_BUILD_DATE }}-raspios-${{ env.DISTRO_NAME }}-${{ matrix.build_type_name }}" >> $GITHUB_ENV

      - name: Install ansible and playbook dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y ansible qemu-user-static unzip zerofree

      - name: Build
        run: |
          build_type_dir="raspios_$(echo ${{ matrix.build_type_name }} | python3 -c "import sys; print('_'.join(reversed(sys.stdin.read().strip().split('-'))))")"
          url="https://downloads.raspberrypi.org/${build_type_dir}/images/${build_type_dir}-${{ env.RASPIOS_RELEASE_DATE }}/${{ env.IMAGE_NAME }}.zip"

          wget $url
          unzip ${{ env.IMAGE_NAME }}.zip
          losetup -f && partx --add --verbose ./${{ env.IMAGE_NAME }}.img

          boot_blk_info=$(blkid -l -o export -t LABEL='boot')
          boot_uuid=$(echo "${boot_blk_info}" | grep '^UUID' | cut -d'=' -f2)

          rootfs_blk_info=$(blkid -l -o export -t LABEL='rootfs')
          rootfs_uuid=$(echo "${rootfs_blk_info}" | grep '^UUID' | cut -d'=' -f2)

          sudo mkdir -p /mnt/raspi-os
          sudo mount UUID=${rootfs_uuid} /mnt/raspi-os
          sudo mount UUID=${boot_uuid} /mnt/raspi-os/boot

          sudo cp /usr/bin/qemu-arm-static /mnt/raspi-os/usr/bin/qemu-arm-static

          sudo mv /mnt/raspi-os/etc/ld.so.preload /mnt/raspi-os/etc/ld.so.preload.bak"

          wget https://github.com/multiarch/qemu-user-static/releases/download/v5.2.0-11/x86_64_qemu-arm-static.tar.gz
          tar xvf x86_64_qemu-arm-static.tar.gz
          cp qemu-arm-static /mnt/raspi-os/usr/bin/
          mkdir -p /mnt/raspi-os/tmp/chilipie-kiosk-build
          cp -r . /mnt/raspi-os/tmp/chilipie-kiosk-build

          chroot /mnt/raspi-os/ qemu-arm-static /mnt/raspi-os/tmp/chilipie-kiosk-build/setup.sh

          rm -rf /mnt/raspi-os/tmp/chilipie-kiosk-build

          sudo umount /mnt/raspi-os/boot
          sudo umount /mnt/raspi-os/

          # unmount
          # zip
          # upload

      - name: Get zip filename
        run: echo "ZIP_FILENAME=$(find playbooks/artifacts -name "*.zip" | head -n1)" >> $GITHUB_ENV

      - name: Upload OS zip artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.REPO_NAME }}-${{ env.DISTRO_NAME }}-${{ github.run_number || github.run_id }}-${{ matrix.build_type_name }}
          if-no-files-found: error
          path: ${{ env.ZIP_FILENAME }}

      - name: Upload metadata artifact
        uses: actions/upload-artifact@v2
        with:
          name: metadata
          if-no-files-found: error
          path: |
            playbooks/artifacts/*
            !${{ env.ZIP_FILENAME }}

      - name: Upload OS zip to GCS
        uses: google-github-actions/upload-cloud-storage@v0.4.0
        with:
          credentials: ${{ secrets.GOOGLE_CLOUD_UPLOAD_JSON_CREDENTIALS }}
          path: ${{ env.ZIP_FILENAME }}
          destination: ${{ secrets.GOOGLE_CLOUD_OS_UPLOAD_BUCKET }}/pi-topOS-${{ env.DISTRO_NAME }}/
